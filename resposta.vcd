$date
  Tue Jul 30 19:59:56 2019
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$scope module standard $end
$upscope $end
$scope module std_logic_1164 $end
$upscope $end
$scope module numeric_std $end
$upscope $end
$scope module fp_adder_testbench $end
$var reg 1 ! sign1 $end
$var reg 1 " sign2 $end
$var reg 4 # exp1[3:0] $end
$var reg 4 $ exp2[3:0] $end
$var reg 8 % frac1[7:0] $end
$var reg 8 & frac2[7:0] $end
$var reg 1 ' sign_out $end
$var reg 4 ( exp_out[3:0] $end
$var reg 8 ) frac_out[7:0] $end
$scope module fp_add_unit $end
$var reg 1 * sign1 $end
$var reg 1 + sign2 $end
$var reg 4 , exp1[3:0] $end
$var reg 4 - exp2[3:0] $end
$var reg 8 . frac1[7:0] $end
$var reg 8 / frac2[7:0] $end
$var reg 1 0 sign_out $end
$var reg 4 1 exp_out[3:0] $end
$var reg 8 2 frac_out[7:0] $end
$var reg 1 3 signb $end
$var reg 1 4 signs $end
$var reg 4 5 expb[3:0] $end
$var reg 4 6 exps[3:0] $end
$var reg 4 7 expn[3:0] $end
$var reg 8 8 fracb[7:0] $end
$var reg 8 9 fracs[7:0] $end
$var reg 8 : fraca[7:0] $end
$var reg 8 ; fracn[7:0] $end
$var reg 8 < sum_norm[7:0] $end
$var reg 4 = exp_diff[3:0] $end
$var reg 9 > sum[8:0] $end
$var reg 3 ? lead0[2:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
0!
0"
b0001 #
b0000 $
b10000010 %
b10000010 &
0'
b0001 (
b11000011 )
0*
0+
b0001 ,
b0000 -
b10000010 .
b10000010 /
00
b0001 1
b11000011 2
03
04
b0001 5
b0000 6
b0001 7
b10000010 8
b10000010 9
b01000001 :
b11000011 ;
b11000011 <
b0001 =
b011000011 >
b000 ?
#500000000
1!
b1001 #
b1010 $
b10000011 %
b10000110 &
b1001 (
b10001010 )
1*
b1001 ,
b1010 -
b10000011 .
b10000110 /
b1001 1
b10001010 2
14
b1010 5
b1001 6
b1001 7
b10000110 8
b10000011 9
b10001010 ;
b10001010 <
b001000101 >
b001 ?
#1000000000
